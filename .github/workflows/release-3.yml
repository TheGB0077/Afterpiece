name: Release 3

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build ("1.2.3")'
        required: true
      encorego_version:
        description: 'Encore-Go version to use ("encore-go1.23.0")'
        required: true

jobs:
  build:
    strategy:
      matrix:
        include:
          - { platform: linux, os: ubuntu-24.04 }
          - { platform: windows, os: windows-latest }
          - { platform: darwin, os: macos-15 }

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Setup Mise
        uses: jdx/mise-action@v2

      - name: Install tools
        run: mise install

      - name: Extract version from tag
        shell: bash
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Using version from tag: $VERSION"
          else
            VERSION="${{ github.event.inputs.version }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Using version from input: $VERSION"
          fi

      - name: Download Encore-Go
        shell: bash
        run: |
          echo "Downloading latest Encore-Go fork for ${{ matrix.platform }}_${{ matrix.arch }}"

          # Create encore-go directory and download the fork
          mkdir -p encore-go

          # Determine the asset name based on platform and architecture
          if [ "${{ matrix.platform }}" = "linux" ]; then
            if [ "${{ matrix.arch }}" = "amd64" ]; then
              ASSET="linux_x86-64.tar.gz"
            else
              ASSET="linux_arm64.tar.gz"
            fi
          elif [ "${{ matrix.platform }}" = "windows" ]; then
            ASSET="windows_x86-64.tar.gz"
          elif [ "${{ matrix.platform }}" = "darwin" ]; then
            if [ "${{ matrix.arch }}" = "amd64" ]; then
              ASSET="macos_x86-64.tar.gz"
            else
              ASSET="macos_arm64.tar.gz"
            fi
          fi

          # Download and extract the latest Go fork
          curl -L "https://github.com/TheGB0077/encore-go/releases/latest/download/${ASSET}" | tar -C encore-go -xzf -

          echo "Go fork downloaded to encore-go/"
          ls -la encore-go/

      - name: Build
        run: task ${{ matrix.platform }}:build:${{ matrix.arch }}
        shell: bash
        env:
          VERSION: "${{ steps.version.outputs.version }}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: encore-${{ matrix.platform }}_${{ matrix.arch }}
          path: |
            dist/
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' # Only create releases for tags
    steps:
      - name: Extract version from tag
        id: version
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          pattern: encore-*
          merge-multiple: true

      - name: Find and organize release assets
        run: |
          mkdir -p release-assets

          # Find the existing archives created by the Taskfile
          # The Taskfile creates: encore-{version}-{platform}.{ext}
          find artifacts -name "encore-${{ steps.version.outputs.version }}-*.tar.gz" -exec cp {} release-assets/ \;
          find artifacts -name "encore-${{ steps.version.outputs.version }}-*.zip" -exec cp {} release-assets/ \;

          # List what we found for debugging
          echo "Found release assets:"
          ls -la release-assets/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Encore ${{ steps.version.outputs.version }}
          body: |
            ## Encore ${{ steps.version.outputs.version }}

            ### Installation
            ```bash
            # Install Encore CLI
            curl -L https://github.com/encoredev/encore/releases/download/v${{ steps.version.outputs.version }}/install.sh | bash
            ```

            ### Downloads
            - **Linux AMD64**: `encore-${{ steps.version.outputs.version }}-linux_amd64.tar.gz`
            - **Linux ARM64**: `encore-${{ steps.version.outputs.version }}-linux_arm64.tar.gz`
            - **macOS AMD64**: `encore-${{ steps.version.outputs.version }}-darwin_amd64.tar.gz`
            - **macOS ARM64**: `encore-${{ steps.version.outputs.version }}-darwin_arm64.tar.gz`
            - **Windows**: `encore-${{ steps.version.outputs.version }}-windows_amd64.zip`

            ### Changelog
            TODO: Add changelog entries
          files: |
            release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
