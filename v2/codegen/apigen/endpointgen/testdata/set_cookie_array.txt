-- code.go --
package code

import "context"

type Response struct {
    Cookies []string `header:"Set-Cookie"`
    OtherHeader  string   `header:"X-Other"`
}

//encore:api public
func TestCookies(ctx context.Context) (*Response, error) { return nil, nil }

-- want:encore.gen.go --
// Code generated by encore. DO NOT EDIT.

package code

import "context"

// These functions are automatically generated and maintained by Encore
// to simplify calling them from other services, as they were implemented as methods.
// They are automatically updated by Encore whenever your API endpoints change.

// Interface defines the service's API surface area, primarily for mocking purposes.
//
// Raw endpoints are currently excluded from this interface, as Encore does not yet
// support service-to-service API calls to raw endpoints.
type Interface interface {
	TestCookies(ctx context.Context) (*Response, error)
}
-- want:encore_internal__api.go --
package code

import (
	"context"
	__api "encore.dev/appruntime/apisdk/api"
	__etype "encore.dev/appruntime/shared/etype"
	jsoniter "github.com/json-iterator/go"
	"net/http"
	"net/url"
)

func init() {
	__api.RegisterEndpoint(EncoreInternal_api_APIDesc_TestCookies, TestCookies)
}

type EncoreInternal_TestCookiesReq struct{}

type EncoreInternal_TestCookiesResp = *Response

var EncoreInternal_api_APIDesc_TestCookies = &__api.Desc[*EncoreInternal_TestCookiesReq, EncoreInternal_TestCookiesResp]{
	Access: __api.Public,
	AppHandler: func(ctx context.Context, reqData *EncoreInternal_TestCookiesReq) (EncoreInternal_TestCookiesResp, error) {
		resp, err := TestCookies(ctx)
		if err != nil {
			return (*Response)(nil), err
		}
		return resp, nil
	},
	CloneReq: func(r *EncoreInternal_TestCookiesReq) (*EncoreInternal_TestCookiesReq, error) {
		var clone *EncoreInternal_TestCookiesReq
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	CloneResp: func(r EncoreInternal_TestCookiesResp) (EncoreInternal_TestCookiesResp, error) {
		var clone EncoreInternal_TestCookiesResp
		bytes, err := jsoniter.ConfigDefault.Marshal(r)
		if err == nil {
			err = jsoniter.ConfigDefault.Unmarshal(bytes, &clone)
		}
		return clone, err
	},
	DecodeExternalResp: func(httpResp *http.Response, json jsoniter.API) (resp EncoreInternal_TestCookiesResp, err error) {
		resp = new(Response)
		dec := new(__etype.Unmarshaller)
		// Decode headers
		h := httpResp.Header
		resp.Cookies = __etype.UnmarshalList(dec, __etype.UnmarshalString, "set-cookie", h.Values("set-cookie"), false)
		resp.OtherHeader = __etype.UnmarshalOne(dec, __etype.UnmarshalString, "x-other", h.Get("x-other"), false)

		if err := dec.Error; err != nil {
			return (*Response)(nil), err
		}
		return resp, nil
	},
	DecodeReq: func(httpReq *http.Request, ps __api.UnnamedParams, json jsoniter.API) (reqData *EncoreInternal_TestCookiesReq, pathParams __api.UnnamedParams, err error) {
		reqData = new(EncoreInternal_TestCookiesReq)
		return reqData, nil, nil
	},
	DefLoc: uint32(0x0),
	EncodeExternalReq: func(reqData *EncoreInternal_TestCookiesReq, stream *jsoniter.Stream) (httpHeader http.Header, queryString url.Values, err error) {
		return nil, nil, nil
	},
	EncodeResp: func(w http.ResponseWriter, json jsoniter.API, resp EncoreInternal_TestCookiesResp, status int) (err error) {
		respData := []byte{'\n'}
		var headers map[string][]string
		if resp != nil {

			// Encode headers
			headers = map[string][]string{
				"set-cookie": __etype.MarshalList(__etype.MarshalString, resp.Cookies),
				"x-other":    []string{__etype.MarshalOne(__etype.MarshalString, resp.OtherHeader)},
			}
		}

		// Set response headers
		for k, vs := range headers {
			for _, v := range vs {
				w.Header().Add(k, v)
			}
		}

		// Set HTTP status code
		if status != 0 {
			w.WriteHeader(status)
		}

		// Write response body
		w.Write(respData)
		return nil
	},
	Endpoint:            "TestCookies",
	Fallback:            false,
	GlobalMiddlewareIDs: []string{},
	Methods:             []string{"GET", "POST"},
	Path:                "/code.TestCookies",
	PathParamNames:      nil,
	Raw:                 false,
	RawHandler:          nil,
	RawPath:             "/code.TestCookies",
	ReqPath: func(reqData *EncoreInternal_TestCookiesReq) (string, __api.UnnamedParams, error) {
		return "/code.TestCookies", nil, nil
	},
	ReqUserPayload: func(reqData *EncoreInternal_TestCookiesReq) any {
		return nil
	},
	Service:           "code",
	ServiceMiddleware: []*__api.Middleware{},
	SvcNum:            1,
	Tags:              nil,
}
